<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Global Varialbes used to control pace and identify current level Biomes
global.biomeIdent = 0; // 0 = Start, 1 = Forest, 2 = Plain, 3 = Mountain, 4 = Desert, (TBC) - End
global.scrollSpeed = 1; // change this to speed up and slowdown the game

// Seeding the Random Generator
randomize(); // improves the randomness of the level generation

// Local Variables relating to Biomes timing [DO NOT EDIT]
step = 0;

// Managing the background system with initial values [DO NOT EDIT]
currentBiome = 0;
transBackground = bg_trans_plain02_forest01;
currentBackground = bg_biomeIdent0_start;
transitionComplete = true;
background_y[0] = 60;
background_y[1] = 60;
     
// Game tweaking values for visuals and gameplay of the main level
screenWidth = 640;
biomeScreens = 3; // Min is 3;
transFactor = 2;
roadMiddle_y = 310;
grass_road_y = 290;
grass_sky_y = 215;
hudSize = 60;

// Object placement frequencies - calculated as = step%object frequency
ob1freq = 4;
ob2freq = 8;
ob3freq = 16;
ob4freq = 32;

// Future Features/ Ideas
// biomeForceChange = false; // a flag to force a biome change (Future)

// Local Varialbes relating to weather (Future)
// background_alpha[2] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Start of the game use the start biome code ***********************************************************************************************************
if (global.biomeIdent == 0)
{
    background_index[0] = currentBackground;
    step = (biomeScreens-1)*screenWidth;
}
// ******************************************************************************************************************************************************


// Background Management ********************************************************************************************************************************
if (global.biomeIdent != currentBiome)
{
    // Background transitions - get the correct background
    transBackground = bgtransition(currentBiome, global.biomeIdent);
    currentBackground = bgbiome(global.biomeIdent)
    
    // setup and start the transition
    background_x[1] = screenWidth;
    background_index[1] = transBackground;  
    background_hspeed[1] = -global.scrollSpeed;
    background_hspeed[0] = -global.scrollSpeed;
    transitionComplete = false;
}

// update to the new biome once the transition is complete
if(background_x[0] == -screenWidth) 
{
     background_x[0] = screenWidth
     background_index[0] = currentBackground;
}

// Stop the transition
if(background_x[1] == -screenWidth)
{
    background_hspeed[1] = 0;
    background_hspeed[0] = 0;
    transitionComplete = true;
    
    
}

// ******************************************************************************************************************************************************



// Object Generation ************************************************************************************************************************************
if(transitionComplete == false)
{
// Generate old and new objects at half rate 
    
    if(step mod (ob1freq/transFactor) == 1) // Main Object 1 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // New Object1s
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // Old object1s 
        inst = instance_create(640, ySpawn, object1(currentBiome)); 
    }

}

if(transitionComplete == true)
{
// Generate old and new objects at full

    if(step mod ob1freq == 1) // Main Object 1 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; 
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
    }
}

// ******************************************************************************************************************************************************


    // Identify the current biome
    currentBiome = global.biomeIdent;

// Counter increment
step++;

// Reset Counter and change to the next biome
if(step == biomeScreens*screenWidth || global.biomeIdent == 0/*|| biomeForceChange == true) */ ) // Update the biome
{
    step = 0;
    global.biomeIdent = irandom_range(1,4); // Random a Biome
} 










// TO DO ***********************************************************************************************************************************************


/*


// Forest 
if(biomeIdent == 1)
{

    background_index[0] = bg_level_forest;
    
    if(step mod 4 == 1) // trees
    {
        yPosTrees = random_range(275, 340); 
        inst = instance_create(672, yPosTrees, ob_forest_simpletree);
    }
}

// Snow
if(biomeIdent == 2)
{    

    //Transition in *************************************************************************
    if (step &lt; 3*screenWidth)
    {
        if(step mod 3 == 1) // clouds
        {
            yPosClouds = random_range(0, 240); 
            inst = instance_create(768, yPosClouds, ob_snow_clouds);
        }
        
        if(step mod 4 == 1 &amp;&amp; step &lt;= 1*screenWidth) // previous trees
        {
        yPosTrees = random_range(275, 340); 
        inst = instance_create(672, yPosTrees, ob_forest_simpletree);
        }
        
        patchRate = 8; // Prepare to transstion
        
    }    
    
    if (step &gt;= 0.9*screenWidth &amp;&amp; step &lt; 3*screenWidth)
    {
        if(step mod 8 == 1) // trees
        {
            yPosTrees = random_range(275, 340); 
            inst = instance_create(768, yPosTrees, ob_snow_simpletree);
            yPosTrees = random_range(275, 340); 
            inst = instance_create(672, yPosTrees, ob_forest_simpletree);
        }
        
        if(step &gt;= 1*screenWidth &amp;&amp; step &lt; 1.5*screenWidth) {patchRate = 4;}
        else {patchRate = 2;} 
        
        if(step mod patchRate == 1 ) // snowpatchs
        {
           yPosPatches = random_range(320, 480); 
           inst = instance_create(768, yPosPatches, ob_snow_patch);
        }
        
        if(patchRate&gt;4)
        {
            effect_create_above(ef_snow, 0, 0, 1, c_white);
        }
        
    }
    
    //Main Body &amp; Transition out ************************************************************************
    if(step &gt;= 3*screenWidth)
    {
        if(step&lt;3.5*screenWidth)
        {
            yPosPatches = random_range(320, 480); 
            inst = instance_create(768, yPosPatches, ob_snow_patch);
        }
                
        if(step&lt;4*screenWidth &amp;&amp; step mod 4 == 1 )
        {
            yPosPatches = random_range(320, 480); 
            inst = instance_create(768, yPosPatches, ob_snow_patch);
        }
        
        if(step&gt;4*screenWidth &amp;&amp; step mod 8 == 1 )
        {
            yPosPatches = random_range(320, 480); 
            inst = instance_create(768, yPosPatches, ob_snow_patch);
        }
    
        
        if(step&gt;4*screenWidth &amp;&amp; step &lt; 8*screenWidth)
        {
            background_index[0] = bg_level_snow;
        }
            
        effect_create_above(ef_snow, 0, 0, 1, c_white)

        if(step mod 4 == 1 &amp;&amp; (biomeScreens-3)*screenWidth) // trees
        {
            yPosTrees = random_range(275, 340); 
            inst = instance_create(672, yPosTrees, ob_snow_simpletree);
        }
    
        if(step mod 3 == 1 &amp;&amp; (biomeScreens-2)*screenWidth) // tclouds
        {
            yPosClouds = random_range(0, 240); 
            inst = instance_create(768, yPosClouds, ob_snow_clouds);
        }
    }
    
}

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>step</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
