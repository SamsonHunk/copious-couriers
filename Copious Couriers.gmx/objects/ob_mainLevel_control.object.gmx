<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Global Varialbes used to control pace and identify current level Biomes
global.biomeIdent = 0; // 0 = Start, 1 = Forest, 2 = Plain, 3 = Mountain, 4 = Desert, (TBC) - End
global.scrollSpeed = 1; // change this to speed up and slowdown the game

// Seeding the Random Generator
randomize(); // improves the randomness of the level generation

// Local Variables relating to Biomes timing [DO NOT EDIT]
step = 0;

// Managing the background system with initial values [DO NOT EDIT]
currentBiome = 0;
weather = -1;
transBackground = bg_trans_plain02_forest01;
currentBackground = bg_biomeIdent0_start;
previousBiome = 0;
transitionComplete = true;
background_y[0] = 60;
background_y[1] = 60;
     
// Game tweaking values for visuals and gameplay of the main level
screenWidth = 640;
biomeScreens = 3; // Min is 3;
transFactor = 4;
roadMiddle_y = 310;
grass_road_y = 290;
grass_sky_y = 215;
hudSize = 60;
weather = 0;

// Object placement frequencies - calculated as = step%object frequency
ob1freq = 8;
ob2freq = 32;
// ob3freq = 16; [FUTURE]
// ob4freq = 32;

// Generate the Cart on the road *Need to sort out the placement variables to make this easier to read.*
wagonWheel_1b = instance_create(65, roadMiddle_y+hudSize-16 , ob_wagon_wheel_back);
wagonWheel_2b = instance_create(140, roadMiddle_y+hudSize-16, ob_wagon_wheel_back); 
wagonWheel_3f = instance_create(45, roadMiddle_y+2+hudSize, ob_wagon_wheel_front); 
wagonWheel_3f = instance_create(120, roadMiddle_y+2+hudSize, ob_wagon_wheel_front); 
wagonWagon = instance_create(90, roadMiddle_y+hudSize-10, ob_wagon_wagon);  

// Place the initial company headquarters *Need to sort out the placement variables to make this easier to read.*
wagonWagon = instance_create(340, (grass_sky_y+100), ob_start_company); 

// Future Features/ Ideas
// biomeForceChange = false; // a flag to force a biome change (Future)

// Local Varialbes relating to weather (Future)
// background_alpha[2] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Start of the game use the start biome code ***********************************************************************************************************
if (global.biomeIdent == 0)
{
    background_index[0] = currentBackground;
    step = (biomeScreens-1)*screenWidth;
}
// ******************************************************************************************************************************************************


// Background Management ********************************************************************************************************************************
if (global.biomeIdent != currentBiome)
{
    // Background transitions - get the correct background
    transBackground = bgtransition(currentBiome, global.biomeIdent);
    currentBackground = bgbiome(global.biomeIdent)
    
    // setup and start the transition
    background_x[1] = screenWidth;
    background_index[1] = transBackground;  
    background_hspeed[1] = -global.scrollSpeed;
    background_hspeed[0] = -global.scrollSpeed;
    transitionComplete = false;
}

// update to the new biome once the transition is complete
if(background_x[0] == -screenWidth) 
{
     background_x[0] = screenWidth
     background_index[0] = currentBackground;
     transitionComplete = true;
}

// Stop the transition
if(background_x[1] == -screenWidth)
{
    background_hspeed[1] = 0;
    background_hspeed[0] = 0;
    
}
// ******************************************************************************************************************************************************


// Object Generation ************************************************************************************************************************************
if(transitionComplete == false)
{
// Generate old and new objects at half rate 
    
    if(step mod (ob1freq*transFactor) == 0) // Main Object 1 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // New Object1s
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // Old object1s 
        inst = instance_create(640, ySpawn, object1(previousBiome)); 
    }
    
        if(step mod (ob2freq*transFactor) == 0) // Main Object 2 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // New Object2s
        inst = instance_create(640, ySpawn, object2(global.biomeIdent));
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; // Old object2s 
        inst = instance_create(640, ySpawn, object2(previousBiome)); 
    }

}

if(transitionComplete == true)
{
// Generate new objects at full
    if(step mod ob1freq == 0) // Main Object 1 - spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; 
        inst = instance_create(640, ySpawn, object1(global.biomeIdent));
    }
    
    if(step mod ob2freq == 0) // Main Object 2 -  spawns between road and sky
    {
        ySpawn = irandom_range(grass_sky_y, grass_road_y)+ hudSize; 
        inst = instance_create(640, ySpawn, object2(global.biomeIdent));
    }
}
// ******************************************************************************************************************************************************


// Weather Generation ***********************************************************************************************************************************
// [FUTURE}
if(transitionComplete == true)
{
    switch(weather)
    {
        case 0:
            effect_clear();
            break;
        case 1:
            effect_create_above(ef_snow, 0, 0, 1, c_white);
            break;
        case 2:
            effect_create_above(ef_rain, 0, 0, 1, c_gray);
            break;
    }
}
// ******************************************************************************************************************************************************


// Loop End Logic ***************************************************************************************************************************************
// Identify the current biome for background
currentBiome = global.biomeIdent;

// Counter increment
step++;

// Reset Counter and change to the next biome
if(step == biomeScreens*screenWidth || global.biomeIdent == 0/*|| biomeForceChange == true) */ ) // Update the biome
{
    step = 0;
    previousBiome = global.biomeIdent;
    global.biomeIdent = irandom_range(1,4); // Random a Biome
    weather = irandom_range(0,2); // Random weather
} 
// ******************************************************************************************************************************************************

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>613</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>step</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
